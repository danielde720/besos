-- Migration: Add server-side order acceptance control
-- This migration adds a settings table to control order acceptance server-side

-- 1. Create settings table to store order acceptance status
CREATE TABLE IF NOT EXISTS "public"."settings" (
    "id" bigint generated by default as identity not null,
    "key" text not null unique,
    "value" text not null,
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone not null default now()
);

-- 2. Enable RLS on settings table
ALTER TABLE "public"."settings" enable row level security;

-- 3. Create primary key
CREATE UNIQUE INDEX IF NOT EXISTS settings_pkey ON public.settings USING btree (id);
ALTER TABLE "public"."settings" ADD CONSTRAINT "settings_pkey" PRIMARY KEY USING INDEX "settings_pkey";

-- 4. Create unique index on key
CREATE UNIQUE INDEX IF NOT EXISTS settings_key_unique ON public.settings USING btree (key);

-- 5. Insert default order acceptance setting (true by default)
INSERT INTO "public"."settings" ("key", "value") 
VALUES ('taking_orders', 'true')
ON CONFLICT ("key") DO NOTHING;

-- 6. RLS Policies for settings table

-- Allow anonymous users to SELECT settings (for checking order status)
CREATE POLICY "allow_anon_select_settings"
ON "public"."settings"
AS PERMISSIVE
FOR SELECT
TO anon
USING (true);

-- Allow authenticated users (admins) full access to settings
CREATE POLICY "allow_auth_full_access_settings"
ON "public"."settings"
AS PERMISSIVE
FOR ALL
TO authenticated
USING (true)
WITH CHECK (true);

-- Allow service role full access to settings
CREATE POLICY "allow_service_role_full_access_settings"
ON "public"."settings"
AS PERMISSIVE
FOR ALL
TO service_role
USING (true)
WITH CHECK (true);

-- 7. Create function to check if orders are being accepted
CREATE OR REPLACE FUNCTION is_taking_orders()
RETURNS boolean AS $$
BEGIN
  RETURN (
    SELECT value::boolean 
    FROM settings 
    WHERE key = 'taking_orders'
  );
END;
$$ LANGUAGE plpgsql IMMUTABLE;

-- 8. Update the orders table RLS policy to check order acceptance status
-- First, drop the existing policy
DROP POLICY IF EXISTS "allow_anon_insert_orders" ON "public"."orders";

-- Create new policy that checks if orders are being accepted
CREATE POLICY "allow_anon_insert_orders_when_accepting"
ON "public"."orders"
AS PERMISSIVE
FOR INSERT
TO anon
WITH CHECK (is_taking_orders() = true);

-- 9. Add helpful comments
COMMENT ON TABLE settings IS 'Stores application settings including order acceptance status';
COMMENT ON FUNCTION is_taking_orders() IS 'Returns true if orders are currently being accepted';
COMMENT ON POLICY "allow_anon_insert_orders_when_accepting" ON orders IS 'Only allows order insertion when taking_orders setting is true';
